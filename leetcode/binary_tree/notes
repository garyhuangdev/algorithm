// 因为树是一种特殊的结构，通过递归可以很方便解决问题。一般有两种方式 - 自顶而下和自底向上

// 举例：求解最大深度的伪代码如下

// 自顶而下 - root为1，每一级向下传递实时深度
1. return specific value for null node
2. update the answer if needed                      // answer <-- params
3. left_ans = top_down(root.left, left_params)		// left_params <-- root.val, params
4. right_ans = top_down(root.right, right_params)	// right_params <-- root.val, params
5. return the answer if needed                      // answer <-- left_ans, right_ans


// 自底向上 - root为max_depth+1,同时每个子树自己计算自己的max_depth，leave结点返回0
1. return 0 if root is null                 // return 0 for null node
2. left_depth = maximum_depth(root.left)
3. right_depth = maximum_depth(root.right)
4. return max(left_depth, right_depth) + 1	// return depth of the subtree rooted at root


Noted:
前两个都属于DFS，也可以用BFS来做(层序遍历)


下面这个link解释他们的区别
https://leetcode-cn.com/leetbook/read/data-structure-binary-tree/xefb4e/